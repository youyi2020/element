// 首先读取根目录所有组件的集合
// 这个json文件维护着Element的所有的组件名，键为组件名，值为组件源码的入口文件；然后遍历键值，将所有组件进行import
// 对外暴露install方法，把所有import的组件通过Vue.component(name, component)方式注册为全局组件
// 并且把一些弹窗类的组件挂载到Vue的原型链上
var Components = require('../../components.json');
var fs = require('fs');
// JSON template(r) is an opinionated simple way to do mustache style template(mustache模板风格)
// replacements on your js and json objects (and of course strings too)!
// 看下面示例
// var render = require('json-templater/string');
// render('{{xfoo}} {{say.what}}', { xfoo: 'yep', say: { what: 'yep' } });
// yep yep
var render = require('json-templater/string');
// 将组件名转为驼峰
var uppercamelcase = require('uppercamelcase');
var path = require('path');
// Node.js os 模块提供的基本的系统操作函数 EOL定义了操作系统的行尾符的常量。解决window和linux系统就行尾符不同的兼容性
var endOfLine = require('os').EOL;
// 定义了一些常量：
var OUTPUT_PATH = path.join(__dirname, '../../src/index.js'); // 输出文件位置
var IMPORT_TEMPLATE = 'import {{name}} from \'../packages/{{package}}/index.js\';'; // import模板字符串
var INSTALL_COMPONENT_TEMPLATE = '  {{name}}'; // 需要被install的组件 空格是因为eslint要进行校验
// 主模版字符串
var MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */ 

{{include}}
import locale from 'element-ui/src/locale';
import CollapseTransition from 'element-ui/src/transitions/collapse-transition';

const components = [
{{install}},
  CollapseTransition
];

const install = function(Vue, opts = {}) {
  locale.use(opts.locale);
  locale.i18n(opts.i18n);

  components.forEach(component => {
    Vue.component(component.name, component);
  });

  Vue.use(Loading.directive);

  Vue.prototype.$ELEMENT = {
    size: opts.size || '',
    zIndex: opts.zIndex || 2000
  };
  // 这几个组件不直接注册成全局组件，而是挂载到Vue的原型链上
  Vue.prototype.$loading = Loading.service;
  Vue.prototype.$msgbox = MessageBox;
  Vue.prototype.$alert = MessageBox.alert;
  Vue.prototype.$confirm = MessageBox.confirm;
  Vue.prototype.$prompt = MessageBox.prompt;
  Vue.prototype.$notify = Notification;
  Vue.prototype.$message = Message;

};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}
// 在module.exports对象中，除了暴露install方法外，还把所有组件进行了对外的暴露，方便引入单个组件。下面示例
// import { Button } from 'element-ui';
// Vue.use(Button);
// import ElementUI from 'element-ui';
// Vue.use(ElementUI)
// 如果按需加载，使用Element官方的babel-plugin-component插件 上面代码会转换成如下形式：
// var _button = require('element-ui/lib/button')
// require('element-ui/lib/theme-chalk/button.css')
// Vue.use(_button)
export default {
  version: '{{version}}',
  locale: locale.use,
  i18n: locale.i18n,
  install,
  CollapseTransition,
  Loading,
{{list}}
};
`;

delete Components.font;

var ComponentNames = Object.keys(Components); // 提取json中的key

var includeComponentTemplate = []; // 需要import的组件
var installTemplate = []; // 需要全局注册的组件
var listTemplate = []; // 需要导出的组件

ComponentNames.forEach(name => {
  var componentName = uppercamelcase(name); // 组件名转换为驼峰 dropdown-item => DropdownItem
  // import {{name}} from \'../packages/{{package}}/index.js\';
  // 就会变成 import DropdownMenu from '../packages/dropdown-menu/index.js';
  includeComponentTemplate.push(render(IMPORT_TEMPLATE, {
    name: componentName,
    package: name
  }));
  // 排除'Loading', 'MessageBox', 'Notification', 'Message' 是因为这几个组件将会全局挂载到Vue的实例上。
  if (['Loading', 'MessageBox', 'Notification', 'Message'].indexOf(componentName) === -1) { //  -1是未找到
    installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, {
      name: componentName,
      component: name
    }));
  }
  // listTemplate数组中添加组件的key的驼峰写法的字符串
  if (componentName !== 'Loading') listTemplate.push(`  ${componentName}`);
});

var template = render(MAIN_TEMPLATE, { // 主模版渲染替换
  include: includeComponentTemplate.join(endOfLine),
  install: installTemplate.join(',' + endOfLine),
  version: process.env.VERSION || require('../../package.json').version,
  list: listTemplate.join(',' + endOfLine)
});

fs.writeFileSync(OUTPUT_PATH, template); // 将生成的 字符串模板写入到 框架入口文件
console.log('[build entry] DONE:', OUTPUT_PATH); // 当构建完成，控制台会输出一句话

